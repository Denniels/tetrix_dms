name: Build and Release Tetrix

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          python3 -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "No requirements.txt found — skipping pip install"
            exit 1
          fi
        shell: bash

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          python -m pip install --upgrade pip
          if (Test-Path requirements.txt) { pip install -r requirements.txt } else { Write-Host 'No requirements.txt found — skipping pip install'; exit 1 }
        shell: pwsh

      - name: Build on Windows
        if: runner.os == 'Windows'
        run: .\build_windows.ps1
        shell: pwsh

      - name: Build on Linux
        if: runner.os == 'Linux'
        run: |
          chmod +x ./build_unix.sh || true
          bash ./build_unix.sh
        shell: bash

      - name: Build on macOS
        if: runner.os == 'macOS'
        run: |
          chmod +x ./build_unix.sh || true
          bash ./build_unix.sh
        shell: bash

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tetrix-${{ matrix.os }}
          path: dist/**

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download linux artifact
        uses: actions/download-artifact@v4
        with:
          name: tetrix-ubuntu-latest
          path: artifacts/ubuntu

      - name: Download windows artifact
        uses: actions/download-artifact@v4
        with:
          name: tetrix-windows-latest
          path: artifacts/windows

      - name: Download macos artifact
        uses: actions/download-artifact@v4
        with:
          name: tetrix-macos-latest
          path: artifacts/macos

      - name: Generate checksums
        run: |
          mkdir -p artifacts/checksums
          find artifacts -type f -not -path "artifacts/checksums/*" -exec sha256sum {} \; > artifacts/checksums/checksums.sha256 || true
        shell: bash

      - name: "Debug: list downloaded artifacts"
        run: |
          echo "Listing artifacts directory"
          ls -la artifacts || true
          echo "Recursive listing"
          find artifacts -maxdepth 4 -type f -print -exec du -h {} \; || true
        shell: bash

      - name: "Create draft release"
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          body: |
            Release automática generada por GitHub Actions for tag ${{ github.ref_name }}.
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Upload assets to draft release (via curl)"
        run: |
          set -euo pipefail
          UPLOAD_URL='${{ steps.create_release.outputs.upload_url }}'
          echo "Upload URL (raw): $UPLOAD_URL"
          if [ -z "$UPLOAD_URL" ] || [ "$UPLOAD_URL" = "null" ]; then
            echo "No upload URL found from create-release step. Aborting."
            exit 1
          fi
          # Strip the template suffix like '{?name,label}' if present
          UPLOAD_URL_CLEAN=${UPLOAD_URL%\{*}
          echo "Upload URL (clean): $UPLOAD_URL_CLEAN"

          files_count=0
          while IFS= read -r -d $'\0' file; do
            files_count=$((files_count+1))
            name=$(basename "$file")
            echo "Uploading $file as $name"
            resp=$(curl -sS -w "%{http_code}" -XPOST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" "$UPLOAD_URL_CLEAN?name=$name") || true
            http_code=${resp: -3}
            body=${resp%$http_code}
            echo "HTTP $http_code"
            if [ "$http_code" != "201" ] && [ "$http_code" != "200" ]; then
              echo "Upload failed for $name. Response body:"
              echo "$body"
              exit 1
            fi
          done < <(find artifacts -type f -print0)

          if [ "$files_count" -eq 0 ]; then
            echo "No files found to upload in artifacts/.";
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
